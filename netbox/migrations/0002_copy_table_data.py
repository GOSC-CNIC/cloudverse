# Generated by Django 4.2.9 on 2024-01-19 05:47

from django.db import migrations, connection, transaction

from netbox.managers.common import NetBoxUserRoleWrapper
from ipam.models import IPAMUserRole
from link.models import LinkUserRole


def copy_table(to_table: str, from_table: str):
    sql = f'INSERT INTO `{to_table}` SELECT * FROM `{from_table}`;'
    with connection.cursor() as cursor:
        cursor.execute(sql)


def do_nothing(apps, schema_editor):
    print('do nothing')


def reverse_copy_org(apps, schema_editor):
    with transaction.atomic(savepoint=False):
        with connection.cursor() as cursor:
            cursor.execute('DELETE FROM `netbox_org_virt_obj`;')    # TRUNCATE会受外键约束限制

    print('[Ok] Delete 机构二级表数据 from netbox')


def run_copy_org_contacts(apps, schema_editor):
    with transaction.atomic():
        with connection.cursor() as cursor:
            # 复制机构二级和联系人
            cursor.execute('INSERT INTO `netbox_org_virt_obj`(`id`, `name`,`organization_id`, `creation_time`,`remark`'
                           ') SELECT `id`, `name`,`organization_id`, `creation_time`,`remark` FROM `ipam_org_virt_obj`;')
            cursor.execute('INSERT INTO `netbox_contact_person`(`id`, `name`, `telephone`, `email`, `address`, '
                           '`creation_time`, `update_time`, `remarks`) '
                           'SELECT `id`, `name`, `telephone`, `email`, `address`, '
                           '`creation_time`, `update_time`, `remarks` FROM `ipam_contact_person`;')
            # 复制机构二级和联系人多对多关系表
            cursor.execute('INSERT INTO `netbox_org_obj_contacts`(`id`, `orgvirtualobject_id`, `contactperson_id`) '
                           'SELECT `id`, `orgvirtualobject_id`, `contactperson_id` FROM `ipam_org_obj_contacts`;')

    print('[Ok] Copy机构二级和联系人表数据 to netbox')


def reverse_copy_org_contacts(apps, schema_editor):
    with transaction.atomic(savepoint=False):
        with connection.cursor() as cursor:
            # 清空制机构二级和联系人多对多关系表
            cursor.execute('TRUNCATE TABLE `netbox_org_obj_contacts`;')
            # 清空制机构二级和联系人表
            cursor.execute('TRUNCATE TABLE `netbox_contact_person`;')
            # cursor.execute('DELETE FROM `netbox_org_virt_obj`;')    # TRUNCATE会受外键约束限制

    print('[Ok] Delete 机构二级联系人和关系表数据 from netbox')


def run_copy_asn_ipv4v6range(apps, schema_editor):
    with transaction.atomic():
        with connection.cursor() as cursor:
            # 复制asn
            cursor.execute('INSERT INTO `netbox_asn`(`id`, `number`, `name`, `creation_time`) '
                           'SELECT `id`, `number`, `name`, `creation_time` FROM `ipam_asn`;')
            # ipv4range ipv4
            cursor.execute('INSERT INTO `netbox_ipv4_range`(`id`, `name`, `status`, `creation_time`, `update_time`,'
                           '`assigned_time`, `asn_id`, `admin_remark`, `remark`, `org_virt_obj_id`, `start_address`,'
                           '`end_address`, `mask_len`) '
                           'SELECT `id`, `name`, `status`, `creation_time`, `update_time`,'
                           '`assigned_time`, `asn_id`, `admin_remark`, `remark`, `org_virt_obj_id`, `start_address`,'
                           '`end_address`, `mask_len` FROM `ipam_ipv4_range`;')
            cursor.execute('INSERT INTO `netbox_ipv4_addr`('
                           '`id`, `creation_time`, `update_time`, `admin_remark`, `remark`, `ip_address`) '
                           'SELECT `id`, `creation_time`, `update_time`, `admin_remark`, `remark`, `ip_address` '
                           'FROM `ipam_ipv4_addr`;')
            cursor.execute('INSERT INTO `netbox_ipv4_range_record`('
                           '`id`, `creation_time`, `record_type`, `ip_ranges`, `remark`, `user_id`, `org_virt_obj_id`,'
                           '`start_address`, `end_address`, `mask_len`) '
                           'SELECT `id`, `creation_time`, `record_type`, `ip_ranges`, `remark`, `user_id`, `org_virt_obj_id`,'
                           '`start_address`, `end_address`, `mask_len` FROM `ipam_ipv4_range_record`;')
            # ipv6range ipv6
            cursor.execute('INSERT INTO `netbox_ipv6_range`(`id`, `name`, `status`, `creation_time`, `update_time`,'
                           '`assigned_time`, `asn_id`, `admin_remark`, `remark`, `org_virt_obj_id`, `start_address`,'
                           '`end_address`, `prefixlen`) '
                           'SELECT `id`, `name`, `status`, `creation_time`, `update_time`,'
                           '`assigned_time`, `asn_id`, `admin_remark`, `remark`, `org_virt_obj_id`, `start_address`,'
                           '`end_address`, `prefixlen` FROM `ipam_ipv6_range`;')
            cursor.execute('INSERT INTO `netbox_ipv6_addr`('
                           '`id`, `creation_time`, `update_time`, `admin_remark`, `remark`, `ip_address`) '
                           'SELECT `id`, `creation_time`, `update_time`, `admin_remark`, `remark`, `ip_address` '
                           'FROM `ipam_ipv6_addr`;')
            cursor.execute('INSERT INTO `netbox_ipv6_range_record`('
                           '`id`, `creation_time`, `record_type`, `ip_ranges`, `remark`, `user_id`, `org_virt_obj_id`,'
                           '`start_address`, `end_address`, `prefixlen`) '
                           'SELECT `id`, `creation_time`, `record_type`, `ip_ranges`, `remark`, `user_id`, `org_virt_obj_id`,'
                           '`start_address`, `end_address`, `prefixlen` FROM `ipam_ipv6_range_record`;')

    print('[Ok] Copy ASN、IPv4/6Range、Record and Address to netbox')


def reverse_copy_asn_ipv4v6range(apps, schema_editor):
    with transaction.atomic(savepoint=False):
        with connection.cursor() as cursor:
            # ipv4
            cursor.execute('TRUNCATE TABLE `netbox_ipv4_addr`;')
            cursor.execute('TRUNCATE TABLE `netbox_ipv4_range_record`;')
            cursor.execute('TRUNCATE TABLE `netbox_ipv4_range`;')

            # ipv6
            cursor.execute('TRUNCATE TABLE `netbox_ipv6_addr`;')
            cursor.execute('TRUNCATE TABLE `netbox_ipv6_range_record`;')
            cursor.execute('TRUNCATE TABLE `netbox_ipv6_range`;')

            # ASN
            # cursor.execute('TRUNCATE TABLE `netbox_asn`;')    # TRUNCATE会受外键约束限制
            cursor.execute('DELETE FROM `netbox_asn`;')

    print('[Ok] Delete ASN、IPv4/6Range、Record and Address from netbox')


def run_copy_link(apps, schema_editor):
    with transaction.atomic():
        with connection.cursor() as cursor:
            # 光缆
            cursor.execute('INSERT INTO `netbox_fiber_cable`(`id`, `number`, `fiber_count`, `length`, `endpoint_1`, '
                           '`endpoint_2`, `remarks`, `create_time`, `update_time`) '
                           'SELECT `id`, `number`, `fiber_count`, `length`, `endpoint_1`, '
                           '`endpoint_2`, `remarks`, `create_time`, `update_time` FROM `link_fiber_cable`;')
            # 配线架, 外键机构二级
            cursor.execute('INSERT INTO `netbox_distribution_frame`(`id`, `number`, `model_type`, `row_count`, '
                           '`col_count`, `place`, `link_org_id`, `remarks`, `create_time`, `update_time`) '
                           'SELECT `id`, `number`, `model_type`, `row_count`, '
                           '`col_count`, `place`, `link_org_id`, `remarks`, `create_time`, `update_time` '
                           'FROM `link_distribution_frame`;')
            # 网元表
            cursor.execute('INSERT INTO `netbox_element`(`id`, `object_type`, `object_id`, `create_time`, `update_time`) '
                           'SELECT `id`, `object_type`, `object_id`, `create_time`, `update_time` FROM `link_element`;')
            # 租用线路，外键网元表
            cursor.execute('INSERT INTO `netbox_lease_line`('
                           '`id`, `element_id`, `private_line_number`, `lease_line_code`, `line_username`, `endpoint_a`,'
                           '`endpoint_z`, `line_type`, `cable_type`, `bandwidth`, `length`, `provider`, `enable_date`,'
                           '`is_whithdrawal`, `money`, `remarks`, `create_time`, `update_time`) '
                           'SELECT `id`, `element_id`, `private_line_number`, `lease_line_code`, `line_username`, `endpoint_a`,'
                           '`endpoint_z`, `line_type`, `cable_type`, `bandwidth`, `length`, `provider`, `enable_date`,'
                           '`is_whithdrawal`, `money`, `remarks`, `create_time`, `update_time` FROM `link_lease_line`;')
            # 光纤，外键 网元 光缆
            cursor.execute('INSERT INTO `netbox_optical_fiber`('
                           '`id`, `element_id`, `fiber_cable_id`, `sequence`, `create_time`, `update_time`) '
                           'SELECT `id`, `element_id`, `fiber_cable_id`, `sequence`, `create_time`, `update_time` '
                           'FROM `link_optical_fiber`;')
            # 配线架端口，外键 网元 配线架
            cursor.execute('INSERT INTO `netbox_distriframe_port`(`id`, `element_id`, `number`, `row`, `col`, '
                           '`distribution_frame_id`, `create_time`, `update_time`) '
                           'SELECT `id`, `element_id`, `number`, `row`, `col`, '
                           '`distribution_frame_id`, `create_time`, `update_time` FROM `link_distriframe_port`;')
            # 光缆接头盒，外键 网元
            cursor.execute('INSERT INTO `netbox_connector_box`(`id`, `element_id`, `number`, `place`, `remarks`, '
                           '`location`, `create_time`, `update_time`) '
                           'SELECT `id`, `element_id`, `number`, `place`, `remarks`, '
                           '`location`, `create_time`, `update_time` FROM `link_connector_box`;')
            # 链路表，多对多网元关系表
            cursor.execute('INSERT INTO `netbox_link`(`id`,`number`, `user`, `endpoint_a`, `endpoint_z`, `bandwidth`,'
                           '`description`, `line_type`, `business_person`, `build_person`, `create_time`, `update_time`,'
                           '`link_status`, `remarks`, `enable_date`) '
                           'SELECT `id`,`number`, `user`, `endpoint_a`, `endpoint_z`, `bandwidth`,'
                           '`description`, `line_type`, `business_person`, `build_person`, `create_time`, `update_time`,'
                           '`link_status`, `remarks`, `enable_date` FROM `link_link`;')
            cursor.execute('INSERT INTO `netbox_elementlink`(`id`, `element_id`, `link_id`, `index`, `sub_index`) '
                           'SELECT `id`, `element_id`, `link_id`, `index`, `sub_index` FROM `link_elementlink`;')

    print('[Ok] Copy 光缆、配线架、网元、租用线路、光纤、配线架端口、光缆接头盒、链路、链路网元关系 表数据 to netbox')


def reverse_copy_link(apps, schema_editor):
    with transaction.atomic(savepoint=False):
        with connection.cursor() as cursor:
            # 链路表，多对多网元关系表
            cursor.execute('DELETE FROM `netbox_elementlink`;')
            cursor.execute('DELETE FROM `netbox_link`;')
            # 光缆接头盒，外键 网元
            cursor.execute('TRUNCATE TABLE `netbox_connector_box`;')
            # 配线架端口，外键 网元 配线架
            cursor.execute('TRUNCATE TABLE `netbox_distriframe_port`;')
            # 光纤，外键 网元 光缆
            cursor.execute('TRUNCATE TABLE `netbox_optical_fiber`;')
            # 租用线路，外键网元表
            cursor.execute('TRUNCATE TABLE `netbox_lease_line`;')
            # 网元表
            cursor.execute('DELETE FROM `netbox_element`;')
            # 配线架, 外键机构二级
            cursor.execute('TRUNCATE TABLE `netbox_distribution_frame`;')
            # 光缆
            cursor.execute('TRUNCATE TABLE `netbox_fiber_cable`;')

    print('[Ok] Delete 光缆、配线架、网元、租用线路、光纤、配线架端口、光缆接头盒、链路、链路网元关系 表数据 from netbox')


def run_copy_netbox_user_role(apps, schema_editor):
    with transaction.atomic():
        for ipam_ur in IPAMUserRole.objects.select_related('user').all():
            ipam_ur: IPAMUserRole
            nbur = NetBoxUserRoleWrapper(ipam_ur.user)
            nbur.user_role = nbur.get_or_create_user_role()
            nbur.set_ipam_admin(ipam_ur.is_admin)
            nbur.set_ipam_readonly(ipam_ur.is_readonly)
            nbur.user_role.organizations.add(*list(ipam_ur.organizations.all()))

        for link_ur in LinkUserRole.objects.select_related('user').all():
            link_ur: IPAMUserRole
            nbur = NetBoxUserRoleWrapper(link_ur.user)
            nbur.user_role = nbur.get_or_create_user_role()
            nbur.set_link_admin(link_ur.is_admin)
            nbur.set_link_readonly(link_ur.is_readonly)

    print('[Ok] Copy user role to netbox')


def reverse_copy_netbox_user_role(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute('TRUNCATE TABLE `netbox_user_role_orgs`;')
        cursor.execute('DELETE FROM `netbox_user_role`;')

    print('[Ok] Delete user role from netbox')


class Migration(migrations.Migration):

    dependencies = [
        ('netbox', '0001_initial'),
    ]

    operations = [
        # 顺序要考虑到外键约束，run按正序执行，reverse按倒序执行
        migrations.RunPython(do_nothing, reverse_code=reverse_copy_org),
        migrations.RunPython(run_copy_netbox_user_role, reverse_code=reverse_copy_netbox_user_role),
        migrations.RunPython(run_copy_org_contacts, reverse_code=reverse_copy_org_contacts),
        migrations.RunPython(run_copy_asn_ipv4v6range, reverse_code=reverse_copy_asn_ipv4v6range),
        migrations.RunPython(run_copy_link, reverse_code=reverse_copy_link),
    ]
