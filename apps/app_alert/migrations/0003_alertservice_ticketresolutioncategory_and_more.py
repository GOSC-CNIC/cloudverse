# Generated by Django 4.2.9 on 2024-06-27 15:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('app_alert', '0002_delete_alertlifetimemodel_alter_alertmodel_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertService',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('name_en', models.CharField(default='', max_length=255, verbose_name='英文名称')),
                ('creation_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('sort_weight', models.IntegerField(default=0, help_text='值越小排序越靠前', verbose_name='排序值')),
                ('remark', models.TextField(blank=True, default='', max_length=10000, verbose_name='监控服务备注')),
                ('thanos_endpoint_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='指标监控系统查询接口')),
                ('thanos_username', models.CharField(blank=True, default='', help_text='用于此服务认证的用户名', max_length=128, verbose_name='指标监控系统认证用户名')),
                ('thanos_password', models.CharField(blank=True, default='', max_length=255, verbose_name='指标监控系统认证密码')),
                ('thanos_receive_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='指标监控系统接收接口')),
                ('thanos_remark', models.CharField(blank=True, default='', max_length=255, verbose_name='指标监控系统备注')),
                ('metric_monitor_url', models.CharField(blank=True, default='', help_text='如果填写有效网址会自动创建对应的站点监控任务，格式为 http(s)://example.cn/', max_length=255, verbose_name='指标监控系统监控网址')),
                ('metric_task_id', models.CharField(blank=True, default='', editable=False, help_text='记录为指标监控系统监控地址创建的站点监控任务的ID', max_length=36, verbose_name='指标监控系统监控任务ID')),
                ('loki_endpoint_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='日志聚合系统查询接口')),
                ('loki_username', models.CharField(blank=True, default='', help_text='用于此服务认证的用户名', max_length=128, verbose_name='日志聚合系统认证用户名')),
                ('loki_password', models.CharField(blank=True, default='', max_length=255, verbose_name='日志聚合系统认证密码')),
                ('loki_receive_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='日志聚合系统接收接口')),
                ('loki_remark', models.CharField(blank=True, default='', max_length=255, verbose_name='日志聚合系统备注')),
                ('log_monitor_url', models.CharField(blank=True, default='', help_text='如果填写有效网址会自动创建对应的站点监控任务，格式为 http(s)://example.cn/', max_length=255, verbose_name='日志聚合系统监控网址')),
                ('log_task_id', models.CharField(blank=True, default='', editable=False, help_text='记录为日志聚合系统监控网址创建的站点监控任务的ID', max_length=36, verbose_name='日志聚合系统监控任务ID')),
            ],
            options={
                'verbose_name': '监控服务',
                'verbose_name_plural': '监控服务',
                'db_table': 'alert_service',
                'ordering': ['sort_weight'],
            },
        ),
        migrations.CreateModel(
            name='TicketResolutionCategory',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='类型名称', max_length=250, verbose_name='类型名称')),
                ('service', models.CharField(help_text='服务名称', max_length=250, verbose_name='服务名称')),
                ('creation', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modification', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '告警工单解决方案类别',
                'verbose_name_plural': '告警工单解决方案类别',
                'db_table': 'alert_ticket_resolution_category',
                'ordering': ['-creation'],
            },
        ),
        migrations.RemoveField(
            model_name='alertmodel',
            name='order',
        ),
        migrations.RemoveField(
            model_name='prealertmodel',
            name='order',
        ),
        migrations.RemoveField(
            model_name='resolvedalertmodel',
            name='order',
        ),
        migrations.CreateModel(
            name='TicketResolution',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution', models.TextField(blank=True, default='', help_text='原因及解决方案', verbose_name='原因及解决方案')),
                ('creation', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modification', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='resolutions', to='app_alert.ticketresolutioncategory', verbose_name='类型')),
            ],
            options={
                'verbose_name': '告警工单解决方案',
                'verbose_name_plural': '告警工单解决方案',
                'db_table': 'alert_ticket_resolution',
                'ordering': ['-creation'],
            },
        ),
        migrations.CreateModel(
            name='ServiceMetric',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, verbose_name='监控的主机集群名称')),
                ('name_en', models.CharField(default='', max_length=255, verbose_name='监控的主机集群英文名称')),
                ('job_tag', models.CharField(default='', help_text='模板：xxx_node_metric', max_length=255, verbose_name='主机集群标签名称')),
                ('prometheus', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='Prometheus接口')),
                ('creation', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('remark', models.TextField(blank=True, default='', verbose_name='备注')),
                ('sort_weight', models.IntegerField(default=0, help_text='值越小排序越靠前', verbose_name='排序值')),
                ('grafana_url', models.CharField(blank=True, default='', max_length=255, verbose_name='Grafana连接')),
                ('dashboard_url', models.CharField(blank=True, default='', max_length=255, verbose_name='Dashboard连接')),
                ('service', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_metric_set', to='app_alert.alertservice', verbose_name='监控服务')),
                ('users', models.ManyToManyField(blank=True, db_constraint=False, db_table='alert_metric_users', related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='管理用户')),
            ],
            options={
                'verbose_name': '监控指标单元',
                'verbose_name_plural': '监控指标单元',
                'db_table': 'alert_service_metric',
                'ordering': ['sort_weight'],
            },
        ),
        migrations.CreateModel(
            name='ServiceLog',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='日志单元站点名称')),
                ('name_en', models.CharField(default='', max_length=128, verbose_name='日志单元英文名称')),
                ('log_type', models.CharField(choices=[('http', 'HTTP'), ('nat', 'NAT')], default='http', max_length=16, verbose_name='日志类型')),
                ('job_tag', models.CharField(default='', help_text='Loki日志中对应的job标识，模板xxx_log', max_length=64, verbose_name='网站日志单元标识')),
                ('sort_weight', models.IntegerField(help_text='值越小排序越靠前', verbose_name='排序值')),
                ('desc', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
                ('creation', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modification', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('service', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_log_set', to='app_alert.alertservice', verbose_name='监控服务')),
                ('users', models.ManyToManyField(blank=True, db_constraint=False, db_table='alert_log_users', related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='管理用户')),
            ],
            options={
                'verbose_name': '监控日志单元',
                'verbose_name_plural': '监控日志单元',
                'db_table': 'alert_service_log',
                'ordering': ['sort_weight'],
            },
        ),
        migrations.CreateModel(
            name='ServiceAdminUser',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', '管理员'), ('ops', '运维')], default='admin', max_length=16, verbose_name='角色')),
                ('join_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='加入时间')),
                ('service', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='app_alert.alertservice', verbose_name='监控服务')),
                ('userprofile', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '监控服务管理员',
                'verbose_name_plural': '监控服务管理员',
                'db_table': 'alert_service_users',
                'ordering': ['-join_time'],
            },
        ),
        migrations.CreateModel(
            name='AlertTicket',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', help_text='工单标题', max_length=250, verbose_name='工单标题')),
                ('description', models.TextField(blank=True, default='', help_text='工单描述', null=True, verbose_name='工单描述')),
                ('service', models.CharField(help_text='服务名称', max_length=250, verbose_name='服务名称')),
                ('severity', models.CharField(blank=True, choices=[('critical', '严重'), ('high', '高'), ('normal', '一般'), ('low', '低'), ('verylow', '很低')], default='normal', max_length=16, verbose_name='严重程度')),
                ('status', models.CharField(choices=[('open', '打开'), ('progress', '处理中'), ('closed', '已关闭')], default='open', max_length=16, verbose_name='状态')),
                ('creation', models.DateTimeField(auto_now_add=True, help_text='工单提交的时间', verbose_name='提交时间')),
                ('modification', models.DateTimeField(auto_now=True, help_text='工单最近修改的时间', verbose_name='修改时间')),
                ('assigned_to', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='分配给')),
                ('resolution', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='app_alert.ticketresolution', verbose_name='原因及解决方案')),
                ('submitter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_tickets', to=settings.AUTH_USER_MODEL, verbose_name='工单提交人')),
            ],
            options={
                'verbose_name': '告警工单',
                'verbose_name_plural': '告警工单',
                'db_table': 'alert_ticket',
                'ordering': ['-creation'],
            },
        ),
        migrations.AddField(
            model_name='alertservice',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='+', through='app_alert.ServiceAdminUser', to=settings.AUTH_USER_MODEL, verbose_name='管理员'),
        ),
        migrations.AddField(
            model_name='alertmodel',
            name='ticket',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='app_alert.alertticket', verbose_name='工单'),
        ),
        migrations.AddField(
            model_name='prealertmodel',
            name='ticket',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='app_alert.alertticket', verbose_name='工单'),
        ),
        migrations.AddField(
            model_name='resolvedalertmodel',
            name='ticket',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='app_alert.alertticket', verbose_name='工单'),
        ),
        migrations.AddConstraint(
            model_name='serviceadminuser',
            constraint=models.UniqueConstraint(fields=('service', 'userprofile'), name='unique_together_service_user'),
        ),
    ]
