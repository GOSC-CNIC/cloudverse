# Generated by Django 4.2.16 on 2025-01-07 06:32

from django.db import migrations
from django.conf import settings

from utils.crypto.rsa import SHA256WithRSA
from apps.app_wallet.models import PayApp
from apps.app_global.models import GlobalConfig


def set_wallet_keys_app_id(apps, schema_editor):
    payment_balance = getattr(settings, 'PAYMENT_BALANCE', {})
    app_id = payment_balance.get('app_id', None)
    if app_id and PayApp.objects.filter(id=app_id).exists():
        GlobalConfig.objects.update_or_create(
            name=GlobalConfig.ConfigName.PAYMENT_APP_ID.value,
            defaults={'value': app_id, 'remark': '本服务对应注册在钱包中的 app id，用于本服务内支付结算'}
        )
    else:
        print('本服务需要在钱包注册一个app，并在后台站点参数中配置app_id，用于本服务内支付结算')

    rsa_keys = getattr(settings, 'PAYMENT_RSA2048', {})
    private_key = rsa_keys.get('private_key', None)
    public_key = rsa_keys.get('public_key', None)
    if private_key and public_key and SHA256WithRSA.is_key_pair_match(private_key=private_key, public_key=public_key):
        GlobalConfig.objects.update_or_create(
            name=GlobalConfig.ConfigName.WALLET_RSA_PRIVATE_KEY.value,
            defaults={'value': private_key, 'remark': '钱包RSA密钥对私钥'}
        )
        GlobalConfig.objects.update_or_create(
            name=GlobalConfig.ConfigName.WALLET_RSA_PUBLIC_KEY.value,
            defaults={'value': public_key, 'remark': '钱包RSA密钥对公钥'}
        )
    else:
        print('需要在后台站点参数中配置钱包RSA密钥对')


def reverse_wallet_keys_app_id(apps, schema_editor):
    return None


class Migration(migrations.Migration):

    dependencies = [
        ('app_global', '0006_announcement_content_en'),
        ('bill', '0002_initial'),
    ]

    operations = [
        migrations.RunPython(set_wallet_keys_app_id, reverse_code=reverse_wallet_keys_app_id),
    ]
