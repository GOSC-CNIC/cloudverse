# Generated by Django 4.2.9 on 2024-05-14 06:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    # replaces = [('service', '0001_initial'), ('service', '0002_initial'),
    #             ('service', '0003_contacts_datacenter_province_datacenter_contacts'),
    #             ('service', '0004_orgdatacenter_serviceconfig_org_data_center'),
    #             ('service', '0005_auto_20231101_0610'), ('service', '0006_remove_serviceconfig_data_center_and_more'),
    #             ('service', '0007_alter_orgdatacenter_remark'), ('service', '0008_serviceconfig_only_admin_visible'),
    #             ('service', '0009_orgdatacenter_log_monitor_url_and_more'),
    #             ('service', '0010_remove_datacenter_endpoint_compute_and_more')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataCenter',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('name_en', models.CharField(default='', max_length=255, verbose_name='英文名称')),
                ('abbreviation', models.CharField(default='', max_length=64, verbose_name='简称')),
                ('independent_legal_person', models.BooleanField(default=True, verbose_name='独立法人单位')),
                ('country', models.CharField(default='', max_length=128, verbose_name='国家/地区')),
                ('city', models.CharField(default='', max_length=128, verbose_name='城市')),
                ('postal_code', models.CharField(default='', max_length=32, verbose_name='邮政编码')),
                ('address', models.CharField(default='', max_length=256, verbose_name='单位地址')),
                ('creation_time', models.DateTimeField(blank=True, default=None, null=True, verbose_name='创建时间')),
                ('status', models.SmallIntegerField(choices=[(1, '开启状态'), (2, '关闭状态')], default=1, verbose_name='服务状态')),
                ('desc', models.CharField(blank=True, max_length=255, verbose_name='描述')),
                ('logo_url', models.CharField(blank=True, default='', max_length=256, verbose_name='LOGO url')),
                ('certification_url', models.CharField(blank=True, default='', max_length=256, verbose_name='机构认证代码url')),
                ('longitude', models.FloatField(blank=True, default=0, verbose_name='经度')),
                ('latitude', models.FloatField(blank=True, default=0, verbose_name='纬度')),
                ('sort_weight', models.IntegerField(default=0, help_text='值越小排序越靠前', verbose_name='排序值')),
                ('province', models.CharField(default='', max_length=128, verbose_name='省份')),
            ],
            options={
                'verbose_name': '机构',
                'verbose_name_plural': '机构',
                'ordering': ['sort_weight'],
            },
        ),
        migrations.CreateModel(
            name='ApplyOrganization',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('name_en', models.CharField(default='', max_length=255, verbose_name='英文名称')),
                ('abbreviation', models.CharField(default='', max_length=64, verbose_name='简称')),
                ('independent_legal_person', models.BooleanField(default=True, verbose_name='是否独立法人单位')),
                ('country', models.CharField(default='', max_length=128, verbose_name='国家/地区')),
                ('city', models.CharField(default='', max_length=128, verbose_name='城市')),
                ('postal_code', models.CharField(default='', max_length=32, verbose_name='邮政编码')),
                ('address', models.CharField(default='', max_length=256, verbose_name='单位地址')),
                ('endpoint_vms', models.CharField(blank=True, default=None, help_text='http(s)://{hostname}:{port}/', max_length=255, null=True, verbose_name='云主机服务地址url')),
                ('endpoint_object', models.CharField(blank=True, default=None, help_text='http(s)://{hostname}:{port}/', max_length=255, null=True, verbose_name='存储服务地址url')),
                ('endpoint_compute', models.CharField(blank=True, default=None, help_text='http(s)://{hostname}:{port}/', max_length=255, null=True, verbose_name='计算服务地址url')),
                ('endpoint_monitor', models.CharField(blank=True, default=None, help_text='http(s)://{hostname}:{port}/', max_length=255, null=True, verbose_name='检测报警服务地址url')),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('status', models.CharField(choices=[('wait', '待审批'), ('cancel', '取消申请'), ('pending', '审批中'), ('reject', '拒绝'), ('pass', '通过')], default='wait', max_length=16, verbose_name='状态')),
                ('desc', models.CharField(blank=True, max_length=255, verbose_name='描述')),
                ('logo_url', models.CharField(blank=True, default='', max_length=256, verbose_name='LOGO url')),
                ('certification_url', models.CharField(blank=True, default='', max_length=256, verbose_name='机构认证代码url')),
                ('deleted', models.BooleanField(default=False, verbose_name='删除')),
                ('longitude', models.FloatField(blank=True, default=0, verbose_name='经度')),
                ('latitude', models.FloatField(blank=True, default=0, verbose_name='纬度')),
                ('data_center', models.OneToOneField(blank=True, default=None, help_text='机构加入申请审批通过后对应的机构', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='apply_data_center', to='service.datacenter', verbose_name='机构')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='申请用户')),
            ],
            options={
                'verbose_name': '机构加入申请',
                'verbose_name_plural': '机构加入申请',
                'db_table': 'organization_apply',
                'ordering': ['creation_time'],
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='姓名')),
                ('telephone', models.CharField(default='', max_length=11, verbose_name='电话')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='邮箱地址')),
                ('address', models.CharField(help_text='详细的联系地址', max_length=255, verbose_name='联系地址')),
                ('creation_time', models.DateTimeField(verbose_name='创建时间')),
                ('update_time', models.DateTimeField(verbose_name='更新时间')),
                ('remarks', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
            ],
            options={
                'verbose_name': '机构联系人',
                'verbose_name_plural': '机构联系人',
                'db_table': 'contacts',
                'ordering': ('-creation_time',),
            },
        ),
        migrations.AddField(
            model_name='datacenter',
            name='contacts',
            field=models.ManyToManyField(blank=True, db_constraint=False, db_table='data_center_contacts', related_name='+', to='service.contacts', verbose_name='机构联系人'),
        ),
        migrations.CreateModel(
            name='OrgDataCenter',
            fields=[
                ('id', models.CharField(blank=True, editable=False, max_length=36, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('name_en', models.CharField(default='', max_length=255, verbose_name='英文名称')),
                ('longitude', models.FloatField(blank=True, default=0, verbose_name='经度')),
                ('latitude', models.FloatField(blank=True, default=0, verbose_name='纬度')),
                ('creation_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('sort_weight', models.IntegerField(default=0, help_text='值越小排序越靠前', verbose_name='排序值')),
                ('remark', models.TextField(blank=True, default='', max_length=10000, verbose_name='数据中心备注')),
                ('thanos_endpoint_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='指标监控系统查询接口')),
                ('thanos_username', models.CharField(blank=True, default='', help_text='用于此服务认证的用户名', max_length=128, verbose_name='指标监控系统认证用户名')),
                ('thanos_password', models.CharField(blank=True, default='', max_length=255, verbose_name='指标监控系统认证密码')),
                ('thanos_receive_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='指标监控系统接收接口')),
                ('thanos_remark', models.CharField(blank=True, default='', max_length=255, verbose_name='指标监控系统备注')),
                ('loki_endpoint_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='日志聚合系统查询接口')),
                ('loki_username', models.CharField(blank=True, default='', help_text='用于此服务认证的用户名', max_length=128, verbose_name='日志聚合系统认证用户名')),
                ('loki_password', models.CharField(blank=True, default='', max_length=255, verbose_name='日志聚合系统认证密码')),
                ('loki_receive_url', models.CharField(blank=True, default='', help_text='http(s)://example.cn/', max_length=255, verbose_name='日志聚合系统接收接口')),
                ('loki_remark', models.CharField(blank=True, default='', max_length=255, verbose_name='日志聚合系统备注')),
                ('organization', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service.datacenter', verbose_name='机构')),
                # ('users', models.ManyToManyField(blank=True, db_constraint=False, db_table='org_data_center_users', related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='管理员')),
                ('log_monitor_url', models.CharField(blank=True, default='', help_text='如果填写有效网址会自动创建对应的站点监控任务，格式为 http(s)://example.cn/', max_length=255, verbose_name='日志聚合系统监控网址')),
                ('log_task_id', models.CharField(blank=True, default='', editable=False, help_text='记录为日志聚合系统监控网址创建的站点监控任务的ID', max_length=36, verbose_name='日志聚合系统监控任务ID')),
                ('metric_monitor_url', models.CharField(blank=True, default='', help_text='如果填写有效网址会自动创建对应的站点监控任务，格式为 http(s)://example.cn/', max_length=255, verbose_name='指标监控系统监控网址')),
                ('metric_task_id', models.CharField(blank=True, default='', editable=False, help_text='记录为指标监控系统监控地址创建的站点监控任务的ID', max_length=36, verbose_name='指标监控系统监控任务ID')),
            ],
            options={
                'verbose_name': '数据中心',
                'verbose_name_plural': '数据中心',
                'db_table': 'org_data_center',
                'ordering': ['sort_weight'],
            },
        ),
        migrations.CreateModel(
            name='OrgDataCenterAdminUser',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('orgdatacenter', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='service.orgdatacenter', verbose_name='数据中心')),
                ('userprofile', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '数据中心管理员',
                'verbose_name_plural': '数据中心管理员',
                'db_table': 'org_data_center_users',
            },
        ),
        migrations.AddField(
            model_name='orgdatacenter',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='+', through='service.OrgDataCenterAdminUser', to=settings.AUTH_USER_MODEL, verbose_name='管理员'),
        ),
        migrations.AddConstraint(
            model_name='orgdatacenteradminuser',
            constraint=models.UniqueConstraint(fields=('orgdatacenter', 'userprofile'), name='unique_together_odc_user'),
        ),
    ]
