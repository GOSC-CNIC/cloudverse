# Generated by Django 3.2.13 on 2023-04-27 07:34
import math

from django.db import migrations


def server_ram_mb_to_gb(apps, schema_editor):
    server_model = apps.get_model("servers", "Server")
    servers = server_model.objects.all()
    for server in servers:
        if server.ram > 1000:
            server.ram = math.ceil(server.ram / 1024)
            server.save(update_fields=['ram'])

    print('Changed server ram unit from MiB to GiB OK', len(servers))


def server_ram_gb_to_mb(apps, schema_editor):
    server_model = apps.get_model("servers", "Server")
    servers = server_model.objects.all()
    for server in servers:
        if server.ram < 1000:
            server.ram = server.ram * 1024
            server.save(update_fields=['ram'])

    print('Changed back server ram unit from GiB to Mib OK', len(servers))


def archive_ram_mb_to_gb(apps, schema_editor):
    arc_model = apps.get_model("servers", "ServerArchive")
    archices = arc_model.objects.all()
    for arc in archices:
        if arc.ram > 1000:
            arc.ram = math.ceil(arc.ram / 1024)
            arc.save(update_fields=['ram'])

    print('Changed archives of server ram unit from MiB to GiB OK', len(archices))


def archive_ram_gb_to_mb(apps, schema_editor):
    arc_model = apps.get_model("servers", "ServerArchive")
    archices = arc_model.objects.all()
    for arc in archices:
        if arc.ram < 1000:
            arc.ram = arc.ram * 1024
            arc.save(update_fields=['ram'])

    print('Changed archives of server ram unit from GiB to MiB OK', len(archices))


class Migration(migrations.Migration):

    dependencies = [
        ('servers', '0007_alter_flavor_ram'),
    ]

    operations = [
        migrations.RunPython(server_ram_mb_to_gb, reverse_code=server_ram_gb_to_mb),
        migrations.RunPython(archive_ram_mb_to_gb, reverse_code=archive_ram_gb_to_mb),
    ]
